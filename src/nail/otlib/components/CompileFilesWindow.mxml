<?xml version="1.0" encoding="utf-8"?>
<!--
///////////////////////////////////////////////////////////////////////////////////
// 
//  Copyright (c) 2014 Nailson <nailsonnego@gmail.com>
// 
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
// 
//  The above copyright notice and this permission notice shall be included in
//  all copies or substantial portions of the Software.
// 
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//  THE SOFTWARE.
//
///////////////////////////////////////////////////////////////////////////////////
-->

<s:Window xmlns:fx="http://ns.adobe.com/mxml/2009" 
          xmlns:s="library://ns.adobe.com/flex/spark" 
          xmlns:mx="library://ns.adobe.com/flex/mx" 
          xmlns:nail="library://ns.nail.com/naillib"
          xmlns:components="nail.otlib.components.*"
          width="400"
          height="270"
          resizable="false"
          maximizable="false"
          minimizable="false"
          fontSize="11"
          backgroundColor="0x494949"
          showStatusBar="false"
          title="@Resource(key='compileClientFiles', bundle='strings')"
          creationComplete="creationCompleteHandler(event)"
          closing="windowClosingHandler(event)">
    
    <fx:Metadata>
        [ResourceBundle("strings")]
    </fx:Metadata>
    
    <fx:Script>
        <![CDATA[
            import mx.collections.ArrayCollection;
            import mx.events.FlexEvent;
            
            import spark.events.IndexChangeEvent;
            import spark.events.TextOperationEvent;
            
            import nail.otlib.core.Version;
            import nail.otlib.core.Versions;
            import nail.otlib.events.FileTextInputEvent;
            
            //--------------------------------------------------------------------------
            // PROPERTIES
            //--------------------------------------------------------------------------
            
            private var _filesName:String;
            private var _filesNameChanged:Boolean;
            private var _directory:File;
            private var _directoryChanged:Boolean;
            private var _sprFile:File;
            private var _datFile:File;
            private var _version:Version;
            private var _versionChanged:Boolean;
            private var _extended:Boolean;
            private var _extendedChanged:Boolean;
            private var _transparency:Boolean;
            private var _transparencyChanged:Boolean;
            private var _cancel:Boolean = true;
            
            //--------------------------------------
            // Getters / Setters 
            //--------------------------------------
            
            public function get sprFile():File { return _sprFile; }
            public function get datFile():File { return _datFile; }
            
            public function get version():Version { return _version; }
            public function set version(value:Version):void
            {
                if (value != _version) {
                    _version = value;
                    _versionChanged = true;
                    invalidateProperties();
                }
            }
            
            public function get filesName():String { return _filesName; }
            public function set filesName(value:String):void
            {
                if (_filesName != value) {
                    _filesName = value;
                    _filesNameChanged = true;
                    invalidateProperties();
                }
            }
            
            public function get directory():File { return _directory; }
            public function set directory(value:File):void
            {
                if (_directory != value) {
                    _directory = value;
                    _directoryChanged = true;
                    invalidateProperties();
                }
            }
            
            public function get extended():Boolean { return _extended; }
            public function set extended(value:Boolean):void
            {
                if (value != _extended) {
                    _extended = value;
                    _extendedChanged = true;
                    invalidateProperties();
                }
            }
            
            public function get transparency():Boolean { return _transparency; }
            public function set transparency(value:Boolean):void
            {
                if (value != _transparency) {
                    _transparency = value;
                    _transparencyChanged = true;
                    invalidateProperties();
                }
            }
            
            //--------------------------------------------------------------------------
            // METHODS
            //--------------------------------------------------------------------------
            
            //--------------------------------------
            // Override Protected
            //--------------------------------------
            
            override protected function commitProperties():void
            {
                super.commitProperties();
                
                if (_filesNameChanged) {
                    setDirectory(_directory);
                    _filesNameChanged = false;
                }
                
                if (_directoryChanged || _versionChanged) {
                    setDirectory(_directory);
                    _directoryChanged = false;
                    _versionChanged = false;
                }
                
                if (_extendedChanged) {
                    extendedCheckBox.selected = _extended;
                    _extendedChanged = true;
                }
                
                if (_transparencyChanged) {
                    transparencyCheckBox.selected = _transparency;
                    _transparencyChanged = true;
                }
            }
            
            //--------------------------------------
            // Private
            //--------------------------------------
            
            private function setDirectory(directory:File):void
            {
                _datFile = null;
                _sprFile = null;
                
                nameTextInput.text = _filesName;
                directoryTextInput.file = directory;
                versionsDropDownList.selectedItem = _version;
                
                if (directory && !isNullOrEmpty(_filesName)) {
                    _datFile = directory.resolvePath(_filesName + ".dat");
                    _sprFile = directory.resolvePath(_filesName + ".spr");
                }
                
                confirmButton.enabled = (directory && _datFile && _sprFile && _version);
                extendedCheckBox.enabled = (_version && _version.value < 960);
            }
            
            //--------------------------------------
            // Event Handlers
            //--------------------------------------
            
            protected function creationCompleteHandler(event:FlexEvent):void
            {
                versionsDropDownList.dataProvider = new ArrayCollection( Versions.instance.getList() );
                versionsDropDownList.selectedItem = _version;
                focusManager.setFocus(confirmButton);
                focusManager.showFocus();
            }
            
            protected function browseButtonClickHandler(event:MouseEvent):void
            {
                var path:String = _directory ? _directory.nativePath : File.userDirectory.nativePath;
                var dir:File = new File(path);
                dir.addEventListener(Event.SELECT, fileSelectHandler);
                dir.browseForDirectory(resourceManager.getString("strings", "selectFolder"));
                
                function fileSelectHandler(event:Event):void
                {
                    directory = dir;
                }
            }
            
            protected function directorChangeHandler(event:FileTextInputEvent):void
            {
                this.directory = event.file;
            }
            
            protected function nameTextInputChangeHandler(event:TextOperationEvent):void
            {
                this.filesName = nameTextInput.text;
            }
            
            protected function confirmButtonClickHandler(event:MouseEvent):void
            {
                _cancel = false;
                this.close();
            }
            
            protected function windowClosingHandler(event:Event):void
            {
                if (_cancel) {
                    _datFile = null;
                    _sprFile = null;
                    _version = null;
                }
            }
            
            protected function versionsDropDownListChangeHandler(event:IndexChangeEvent):void
            {
                this.version = versionsDropDownList.selectedItem as Version;
            }
            
            protected function extendedCheckBoxChangeHandler(event:Event):void
            {
                this.extended = extendedCheckBox.selected;
            }
            
            protected function transparencyCheckBoxChangeHandler(event:Event):void
            {
                this.transparency = transparencyCheckBox.selected;
            }
            
        ]]>
    </fx:Script>
    
    <s:Group width="100%" 
             height="100%">
        <s:layout>
            <s:VerticalLayout gap="10"
                              paddingLeft="10"
                              paddingRight="10"
                              paddingTop="10"
                              paddingBottom="10"
                              horizontalAlign="right"/>
        </s:layout>
        
        <nail:GroupBox width="100%"
                       label="{resourceManager.getString('strings', 'name') + ':'}">
            <nail:layout>
                <s:HorizontalLayout gap="10"
                                    verticalAlign="middle"
                                    horizontalAlign="right"
                                    paddingLeft="10" 
                                    paddingRight="10"
                                    paddingTop="10" 
                                    paddingBottom="10"/>
            </nail:layout>
            <s:TextInput id="nameTextInput"
                         width="100%"
                         change="nameTextInputChangeHandler(event)"/>
        </nail:GroupBox>
        
        <nail:GroupBox width="100%" label="{resourceManager.getString('strings', 'outputFolder') + ':'}">
            <nail:layout>
                <s:HorizontalLayout gap="10"
                                    verticalAlign="middle"
                                    horizontalAlign="right"
                                    paddingLeft="10" 
                                    paddingRight="10"
                                    paddingTop="10" 
                                    paddingBottom="10"/>
            </nail:layout>
            <components:FileTextInput id="directoryTextInput"
                                      left="0"
                                      width="100%"
                                      fileChange="directorChangeHandler(event)"/>
            <s:Button id="browseButton"
                      label="@Resource(key='browse', bundle='strings')"
                      height="21"
                      click="browseButtonClickHandler(event)"/>
        </nail:GroupBox>
        
        <nail:GroupBox width="100%" label="@Resource(key='version', bundle='strings')">
            <nail:layout>
                <s:HorizontalLayout gap="10"
                                    paddingLeft="10"
                                    paddingRight="10"
                                    paddingTop="10"
                                    paddingBottom="10"/>
            </nail:layout>
            <s:DropDownList id="versionsDropDownList"
                            width="100%"
                            height="21"
                            change="versionsDropDownListChangeHandler(event)"/>
            <s:CheckBox id="extendedCheckBox"
                        label="@Resource(key='extended', bundle='strings')"
                        change="extendedCheckBoxChangeHandler(event)"/>
            <s:CheckBox id="transparencyCheckBox"
                        label="@Resource(key='transparency', bundle='strings')"
                        change="transparencyCheckBoxChangeHandler(event)"/>
        </nail:GroupBox>
        
        <s:Spacer height="10"/>
        
        <nail:ShadowLine width="100%"/>
        
        <s:HGroup width="100%"
                  verticalAlign="middle"
                  horizontalAlign="right">
            <s:Button id="confirmButton"
                      label="@Resource(key='confirm', bundle='strings')"
                      minWidth="70"
                      enabled="false"
                      click="confirmButtonClickHandler(event)"/>
            <s:Button id="cancelButton"
                      label="@Resource(key='cancel', bundle='strings')"
                      minWidth="70"
                      click="close()"/>
        </s:HGroup>
    </s:Group>
</s:Window>
