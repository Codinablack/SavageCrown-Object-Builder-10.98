<?xml version="1.0" encoding="utf-8"?>
<!--
///////////////////////////////////////////////////////////////////////////////////
// 
//  Copyright (c) 2014 Nailson <nailsonnego@gmail.com>
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
// 
//  The above copyright notice and this permission notice shall be included in
//  all copies or substantial portions of the Software.
// 
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//  THE SOFTWARE.
//
///////////////////////////////////////////////////////////////////////////////////
-->

<s:Window xmlns:fx="http://ns.adobe.com/mxml/2009" 
          xmlns:s="library://ns.adobe.com/flex/spark" 
          xmlns:mx="library://ns.adobe.com/flex/mx"
          xmlns:nail="library://ns.nail.com/naillib"
          xmlns:components="nail.otlib.components.*"
          minWidth="500"
          minHeight="400"
          showStatusBar="false"
          backgroundColor="0x494949"
          title="@Resource(key='objectViewer', bundle='strings')"
          fontSize="11"
          creationComplete="creationCompleteHandler(event)">
    
    <fx:Declarations>
        <fx:XMLList id="menuXML">
            <menuitem label="{resourceManager.getString('strings', 'menu.file')}">
                <menuitem label="{resourceManager.getString('strings', 'menu.open')}" data="fileOpen" keyEquivalent='O' icon="nail.assets.Icons_OPEN"/>
            </menuitem>
        </fx:XMLList>
    </fx:Declarations>
    
    <s:layout>
        <s:VerticalLayout/>
    </s:layout>
    
    <fx:Script>
        <![CDATA[
            import mx.events.FlexEvent;
            import mx.events.MenuEvent;
            
            import flashx.textLayout.conversion.TextConverter;
            
            import nail.assets.Icons;
            import nail.assets.NailAssets;
            import nail.components.controls.Alert;
            import nail.objectbuilder.core.IObjectBuilder;
            import nail.otlib.core.Version;
            import nail.otlib.core.Versions;
            import nail.otlib.loaders.PathHelper;
            import nail.otlib.things.ThingData;
            import nail.otlib.utils.OTFormat;
            import nail.utils.FileUtil;
            import nail.utils.StringUtil;
            
            //--------------------------------------------------------------------------
            // PROPERTIES
            //--------------------------------------------------------------------------
            
            public var application:IObjectBuilder;
            
            private var _file:File;
            private var _fileChanged:Boolean;
            private var _fileList:Vector.<File>;
            private var _index:int;
            private var _lastDirectory:File;
            private var _zoom:Number;
            private var _zoomChanged:Boolean;
            private const STATUS:String = "<b>{0}</b>: {1} - <b>{2}</b>: {3} - <b>{4}</b>: {5}";
            
            //--------------------------------------
            // Getters / Setters
            //--------------------------------------
            
            public function get file():File { return _file; }
            public function set file(value:File):void
            {
                _file = value;
                _fileChanged = true;
                invalidateProperties();
            }
            
            [Bindable]
            public function get zoom():Number { return _zoom; }
            public function set zoom(value:Number):void
            {
                if (_zoom != value && value >= zoomSlider.minimum && value <= zoomSlider.maximum) {
                    _zoom = value;
                    _zoomChanged = true;
                    invalidateProperties();
                }
            }
            
            //--------------------------------------------------------------------------
            // METHODS
            //--------------------------------------------------------------------------
            
            //--------------------------------------
            // Override Protected
            //--------------------------------------
            
            override protected function commitProperties():void
            {
                super.commitProperties();
                
                if (_fileChanged) {
                    setFile(_file);
                    _fileChanged = false;
                }
                
                if (_zoomChanged) {
                    thingView.scaleX = _zoom;
                    thingView.scaleY = _zoom;
                    _zoomChanged = false;
                }
            }
            
            //--------------------------------------
            // Private
            //--------------------------------------
            
            private function setFile(fileTarget:File):void
            {
                if (!fileTarget || fileTarget.extension != OTFormat.OBD)
                {
                    thingView.thingData = null;
                    descriptionText.text = "";
                    previousButton.enabled = false;
                    nextButton.enabled = false;
                    importButton.enabled = false;
                    deleteButton.enabled = false;
                    return;
                }
                
                var directory:File = FileUtil.getDirectory(fileTarget);
                
                // Checks if new directory and current directory are equal.
                if (_fileList && _lastDirectory && FileUtil.compare(_lastDirectory, directory)) {
                    setFileList(fileTarget, _fileList);
                    return;
                }
                
                var files:Array = directory.getDirectoryListing();
                var length:uint = files.length;
                var fileFoundList:Vector.<File> = new Vector.<File>();
                
                for (var i:uint = 0; i < length; i++) {
                    var file:File = files[i];
                    if (file.extension == OTFormat.OBD) {
                        fileFoundList[fileFoundList.length] = file;
                    }
                }
                
                _lastDirectory = directory;
                FileUtil.sortFiles(fileFoundList, Array.NUMERIC);
                setFileList(fileTarget, fileFoundList);
            }
            
            private function onOpenFile():void
            {
                var filter:FileFilter = new FileFilter("Object Builder Data", "*.obd;");
                var file:File = _lastDirectory ? new File(_lastDirectory.nativePath) : File.userDirectory;
                file.addEventListener(Event.SELECT, fileSelectHandler);
                file.browseForOpen("Select File", [filter]);
                
                function fileSelectHandler(event:Event):void
                {
                    setFile(file);
                }
            }
            
            private function setFileList(target:File, list:Vector.<File>):void
            {
                _fileList = list;
                
                previousButton.enabled = (list && list.length > 1);
                nextButton.enabled = previousButton.enabled;
                importButton.enabled = (list && list.length != 0);
                deleteButton.enabled = importButton.enabled;
                
                loadThingData(target);
                
                var length:uint = list.length;
                for (var i:uint = 0; i < length; i++) {
                    if (target.nativePath == list[i].nativePath) {
                        _index = i;
                        break;
                    }
                }
            }
            
            private function loadThingData(file:File):void
            {
                try
                {
                    var bytes:ByteArray = new ByteArray();
                    var stream:FileStream = new FileStream();
                    stream.open(file, FileMode.READ);
                    stream.readBytes(bytes, 0, stream.bytesAvailable);
                    stream.close();
                    
                    var thingData:ThingData = ThingData.unserialize(bytes);
                    bytes.position = 0;
                    
                    var statusText:String = StringUtil.substitute(
                        STATUS,
                        resourceManager.getString("strings", "name"),
                        FileUtil.getName(file),
                        resourceManager.getString("strings", "type"),
                        resourceManager.getString("strings", thingData.category),
                        resourceManager.getString("strings", "version"),
                        Versions.instance.getByValue(bytes.readUnsignedShort()).valueStr);
                    this.descriptionText.textFlow = TextConverter.importToFlow(
                        statusText,
                        TextConverter.TEXT_FIELD_HTML_FORMAT);
                    this.thingView.thingData = thingData;
                } catch(error:Error) {
                    Alert.show(error.getStackTrace(), resourceManager.getString("strings", "error"), Alert.OK, this);
                }
            }
            
            private function previousObject():void
            {
                _index = (_index - 1 < 0) ? (_fileList.length - 1) : (_index - 1);
                loadThingData(_fileList[_index]);
            }
            
            private function nextObject():void
            {
                if (_fileList.length != 0) {
                    _index = (_index + 1) % _fileList.length;
                    loadThingData(_fileList[_index]);
                } else {
                    this.file = null;
                }
            }
            
            //--------------------------------------
            // Event Handlers
            //--------------------------------------
            
            protected function previousButtonDownHandler(event:FlexEvent):void
            {
                this.previousObject();
            }
            
            protected function nextButtonDownHandler(event:FlexEvent):void
            {
                this.nextObject();
            }
            
            protected function importButtonClickHandler(event:MouseEvent):void
            {
                var helper:PathHelper = new PathHelper(_fileList[_index].nativePath);
                application.importThingsFromFiles(Vector.<PathHelper>([helper]));
            }
            
            protected function deleteButtonClickHandler(event:MouseEvent):void
            {
                if (!thingView.thingData) return;
                
                var file:File = _fileList[_index];
                
                try
                {
                    file.moveToTrash();
                    _fileList.splice(_index, 1);
                    nextObject();
                } catch(error:Error) { }
            }
            
            protected function creationCompleteHandler(event:FlexEvent):void
            {
                systemManager.stage.addEventListener(KeyboardEvent.KEY_UP, keyUpHandler);
            }
            
            protected function menuItemClickHandler(event:MenuEvent):void
            {
                var data:String = String(event.item.@data);
                switch(data) {
                    case "fileOpen":
                        this.onOpenFile();
                        break;
                }
            }
            
            override protected function keyUpHandler(event:KeyboardEvent):void
            {
                var keyCode:uint = event.keyCode;
                
                if (event.ctrlKey) {
                    switch(keyCode) {
                        case Keyboard.O:
                            this.onOpenFile();
                            break;
                    }
                } else if (_fileList && _fileList.length > 1) {
                    switch(keyCode) {
                        case Keyboard.LEFT:
                            this.previousObject();
                            break;
                        case Keyboard.RIGHT:
                            this.nextObject();
                            break;
                    }
                }
            }
            
            protected function zoomChangeHandler(event:Event):void
            {
                this.zoom = HSlider(event.target).value;
            }
            
        ]]>
    </fx:Script>
    
    <!-- menu bar -->
    <s:Group width="100%"
             height="31">
        <!-- fill -->
        <s:Rect left="-1" right="-1" top="1" bottom="0">
            <s:fill>
                <s:SolidColor color="0x494949"/>
            </s:fill>
        </s:Rect>
        
        <!-- border -->
        <s:Rect left="-1" right="-1" top="0" bottom="0">
            <s:stroke>
                <s:SolidColorStroke color="0x272727"/>
            </s:stroke>
        </s:Rect>
        
        <mx:MenuBar id="menuBar"
                    width="100%"
                    top="4"
                    fontSize="11"
                    labelField="@label"
                    iconField="@icon"
                    showRoot="true"
                    dataProvider="{menuXML}"
                    itemSkin="nail.components.skins.MenuBarItemSkin"
                    itemClick="menuItemClickHandler(event)"/>
    </s:Group>
    
    <s:HGroup width="100%"
              height="100%"
              horizontalAlign="center"
              verticalAlign="middle">
        <components:ThingView id="thingView"/>
    </s:HGroup>
    
    <s:HGroup width="100%"
              horizontalAlign="center"
              verticalAlign="middle">
        <s:Button id="previousButton"
                  toolTip="@Resource(key='previous', bundle='strings')"
                  width="30"
                  height="30"
                  icon="{NailAssets.PREVIOUS}"
                  enabled="false"
                  autoRepeat="true"
                  repeatInterval="200"
                  buttonDown="previousButtonDownHandler(event)"/>
        <s:Button id="importButton"
                  toolTip="@Resource(key='import', bundle='strings')"
                  width="30"
                  height="30"
                  icon="{nail.assets.Icons.IMPORT}"
                  enabled="false"
                  click="importButtonClickHandler(event)"/>
        <s:Button id="deleteButton"
                  toolTip="@Resource(key='delete', bundle='strings')"
                  width="30"
                  height="30"
                  icon="{nail.assets.Icons.DELETE}"
                  enabled="false"
                  click="deleteButtonClickHandler(event)"/>
        <s:Button id="nextButton"
                  toolTip="@Resource(key='next', bundle='strings')"
                  width="30"
                  height="30"
                  icon="{NailAssets.NEXT}"
                  enabled="false"
                  autoRepeat="true"
                  repeatInterval="200"
                  buttonDown="nextButtonDownHandler(event)"/>
    </s:HGroup>
    
    <nail:StatusBar width="100%"
                    height="24">
        <nail:layout>
            <s:HorizontalLayout verticalAlign="middle"
                                paddingLeft="10"
                                paddingRight="10"/>
        </nail:layout>
        <s:Spacer width="100%"/>
        <s:RichEditableText id="descriptionText"
                            editable="false"
                            focusEnabled="false"/>
        <s:Spacer width="100%"/>
        <s:Label text="{resourceManager.getString('strings', 'zoom')+':'}"/>
        <s:HSlider id="zoomSlider"
                   width="100"
                   minimum="1.0"
                   maximum="5.0"
                   stepSize="0.1"
                   value="{zoom}"
                   focusEnabled="false"
                   change="zoomChangeHandler(event)"/>
    </nail:StatusBar>
</s:Window>
